["^ ","~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$schema.spec.core","~:imports",null,"~:requires",["^ ","~$utils","~$schema.utils","^8","^8"],"~:uses",null,"~:defs",["^ ","~$CoreSpec",["^ ","~:meta",["^ ","~:file","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\schema\\spec\\core.cljs","~:line",12,"~:column",14,"~:end-line",12,"~:end-column",22,"~:doc","Specs are a common language for Schemas to express their structure.\n   These two use-cases aren't priveledged, just the two that are considered core\n   to being a Spec.","~:protocol-symbol",true,"~:jsdoc",["~#list",["@interface"]],"~:protocol-info",["^ ","~:methods",["^ ","~$subschemas",[["~$this"]],"~$checker",[["^I","~$params"]]]]],"^C",true,"^3","~$schema.spec.core/CoreSpec","^=","resources\\public\\js\\compiled2\\out\\schema\\spec\\core.cljs","^A",22,"^?",1,"^>",12,"^F",["^ ","^G",["^ ","^H",[["^I"]],"^J",[["^I","^K"]]]],"~:info",null,"^@",12,"~:impls",["^2",[]],"^B","Specs are a common language for Schemas to express their structure.\n   These two use-cases aren't priveledged, just the two that are considered core\n   to being a Spec.","^D",["^E",["@interface"]]],"^H",["^ ","~:protocol-inline",null,"^<",["^ ","^=","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\schema\\spec\\core.cljs","^>",16,"^?",4,"^@",16,"^A",14,"~:protocol","^L","^B","List all subschemas","~:arglists",["^E",["~$quote",["^E",[["^I"]]]]]],"^P","^L","^3","~$schema.spec.core/subschemas","~:variadic",false,"^=","resources\\public\\js\\compiled2\\out\\schema\\spec\\core.cljs","^A",14,"~:method-params",["^E",[["^I"]]],"~:protocol-impl",null,"~:arglists-meta",["^E",[null,null]],"^?",1,"^>",12,"^@",16,"~:max-fixed-arity",1,"~:fn-var",true,"^Q",["^E",["^R",["^E",[["^I"]]]]],"^B","List all subschemas"],"^J",["^ ","^O",null,"^<",["^ ","^=","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\schema\\spec\\core.cljs","^>",18,"^?",4,"^@",18,"^A",11,"^P","^L","^B","Create a function that takes [data], and either returns a walked version of data\n     (by default, usually just data), or a utils/ErrorContainer containing value that looks\n     like the 'bad' parts of data with ValidationErrors at the leaves describing the failures.\n\n     params are: subschema-checker, return-walked?, and cache.\n\n     params is a map specifying:\n      - subschema-checker - a function for checking subschemas\n      - returned-walked? - a boolean specifying whether to return a walked version of the data\n        (otherwise, nil is returned which increases performance)\n      - cache - a map structure from schema to checker, which speeds up checker creation\n        when the same subschema appears multiple times, and also facilitates handling\n        recursive schemas.","^Q",["^E",["^R",["^E",[["^I","^K"]]]]]],"^P","^L","^3","~$schema.spec.core/checker","^T",false,"^=","resources\\public\\js\\compiled2\\out\\schema\\spec\\core.cljs","^A",11,"^U",["^E",[["^I","^K"]]],"^V",null,"^W",["^E",[null,null]],"^?",1,"^>",12,"^@",18,"^X",2,"^Y",true,"^Q",["^E",["^R",["^E",[["^I","^K"]]]]],"^B","Create a function that takes [data], and either returns a walked version of data\n     (by default, usually just data), or a utils/ErrorContainer containing value that looks\n     like the 'bad' parts of data with ValidationErrors at the leaves describing the failures.\n\n     params are: subschema-checker, return-walked?, and cache.\n\n     params is a map specifying:\n      - subschema-checker - a function for checking subschemas\n      - returned-walked? - a boolean specifying whether to return a walked version of the data\n        (otherwise, nil is returned which increases performance)\n      - cache - a map structure from schema to checker, which speeds up checker creation\n        when the same subschema appears multiple times, and also facilitates handling\n        recursive schemas."],"~$+no-precondition+",["^ ","^O",null,"^<",["^ ","^=","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\schema\\spec\\core.cljs","^>",43,"^?",6,"^@",43,"^A",23],"^3","~$schema.spec.core/+no-precondition+","^T",false,"^=","resources\\public\\js\\compiled2\\out\\schema\\spec\\core.cljs","^A",23,"^U",["^E",[["~$_"]]],"^V",null,"^W",["^E",[]],"^?",1,"^>",43,"^@",43,"^X",1,"^Y",true,"^Q",null],"~$precondition",["^ ","^O",null,"^<",["^ ","^=","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\schema\\spec\\core.cljs","^>",45,"^?",7,"^@",45,"^A",19,"^Q",["^E",["^R",["^E",[["~$s","~$p","~$err-f"]]]]],"^B","Helper for making preconditions.\n   Takes a schema, predicate p, and error function err-f.\n   If the datum passes the predicate, returns nil.\n   Otherwise, returns a validation error with description (err-f datum-description),\n   where datum-description is a (short) printable standin for the datum."],"^3","~$schema.spec.core/precondition","^T",false,"^=","resources\\public\\js\\compiled2\\out\\schema\\spec\\core.cljs","^A",19,"^U",["^E",[["~$s","~$p","^12"]]],"^V",null,"^W",["^E",[null,null]],"^?",1,"^>",45,"^@",45,"^X",3,"^Y",true,"^Q",["^E",["^R",["^E",[["~$s","~$p","^12"]]]]],"^B","Helper for making preconditions.\n   Takes a schema, predicate p, and error function err-f.\n   If the datum passes the predicate, returns nil.\n   Otherwise, returns a validation error with description (err-f datum-description),\n   where datum-description is a (short) printable standin for the datum."],"~$run-checker",["^ ","^O",null,"^<",["^ ","^=","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\schema\\spec\\core.cljs","^>",65,"^?",7,"^@",65,"^A",18,"^Q",["^E",["^R",["^E",[["~$f","~$return-walked?","~$s"]]]]],"^B","A helper to start a checking run, by setting the appropriate params.\n   For examples, see schema.core/checker or schema.coerce/coercer."],"^3","~$schema.spec.core/run-checker","^T",false,"^=","resources\\public\\js\\compiled2\\out\\schema\\spec\\core.cljs","^A",18,"^U",["^E",[["~$f","^15","~$s"]]],"^V",null,"^W",["^E",[null,null]],"^?",1,"^>",65,"^@",65,"^X",3,"^Y",true,"^Q",["^E",["^R",["^E",[["~$f","^15","~$s"]]]]],"^B","A helper to start a checking run, by setting the appropriate params.\n   For examples, see schema.core/checker or schema.coerce/coercer."],"~$with-cache",["^ ","^O",null,"^<",["^ ","^=","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\schema\\spec\\core.cljs","^>",75,"^?",7,"^@",75,"^A",17,"^Q",["^E",["^R",["^E",[["~$cache","~$cache-key","~$wrap-recursive-delay","~$result-fn"]]]]]],"^3","~$schema.spec.core/with-cache","^T",false,"^=","resources\\public\\js\\compiled2\\out\\schema\\spec\\core.cljs","^A",17,"^U",["^E",[["^18","^19","^1:","^1;"]]],"^V",null,"^W",["^E",[null,null]],"^?",1,"^>",75,"^@",75,"^X",4,"^Y",true,"^Q",["^E",["^R",["^E",[["^18","^19","^1:","^1;"]]]]]],"~$sub-checker",["^ ","^O",null,"^<",["^ ","^=","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\schema\\spec\\core.cljs","^>",85,"^?",7,"^@",85,"^A",18,"^Q",["^E",["^R",["^E",[[["^ ","~:keys",["~$schema","~$error-wrap"]],["^ ","^1>",["~$subschema-checker","^18"],"~:as","^K"]]]]]],"^B","Should be called recursively on each subschema in the 'checker' method of a spec.\n   Handles caching and error wrapping behavior."],"^3","~$schema.spec.core/sub-checker","^T",false,"^=","resources\\public\\js\\compiled2\\out\\schema\\spec\\core.cljs","^A",18,"^U",["^E",[["~$p__32542","~$p__32543"]]],"^V",null,"^W",["^E",[null,null]],"^?",1,"^>",85,"^@",85,"^X",2,"^Y",true,"^Q",["^E",["^R",["^E",[[["^ ","^1>",["^1?","^1@"]],["^ ","^1>",["^1A","^18"],"^1B","^K"]]]]]],"^B","Should be called recursively on each subschema in the 'checker' method of a spec.\n   Handles caching and error wrapping behavior."]],"~:require-macros",["^ ","~$macros","~$schema.macros","^1H","^1H","^7","^8","^8","^8"],"~:cljs.analyzer/constants",["^ ","~:seen",["^2",["~:schema","~:schema.spec.core/in-progress","~:return-walked?","~$throws?","~:else","~:subschema-checker","~:cache","~$not","~:error-wrap"]],"~:order",["^1N","^1O","^1R","^1P","^1M","^1Q","^1L","^1K","^1S"]],"^B","Protocol and preliminaries for Schema 'specs', which are a common language\n   for schemas to use to express their structure."]