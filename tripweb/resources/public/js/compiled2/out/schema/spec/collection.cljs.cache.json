["^ ","~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$schema.spec.collection","~:imports",null,"~:requires",["^ ","~$utils","~$schema.utils","^8","^8","~$spec","~$schema.spec.core","^:","^:"],"~:uses",null,"~:defs",["^ ","~$element-transformer",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\schema\\spec\\collection.cljs","~:line",12,"~:column",8,"~:end-line",12,"~:end-column",27,"~:private",true,"~:arglists",["~#list",["~$quote",["^G",[["~$e","~$params","~$then"]]]]]],"^E",true,"^3","~$schema.spec.collection/element-transformer","~:variadic",false,"^@","resources\\public\\js\\compiled2\\out\\schema\\spec\\collection.cljs","^D",27,"~:method-params",["^G",[["~$e","^I","^J"]]],"~:protocol-impl",null,"~:arglists-meta",["^G",[null,null]],"^B",1,"^A",12,"^C",12,"~:max-fixed-arity",3,"~:fn-var",true,"^F",["^G",["^H",["^G",[["~$e","^I","^J"]]]]]],"~$has-error?",["^ ","^>",null,"^?",["^ ","^@","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\schema\\spec\\collection.cljs","^A",31,"^B",8,"^C",31,"^D",18,"^E",true,"^F",["^G",["^H",["^G",[["~$l"]]]]]],"^E",true,"^3","~$schema.spec.collection/has-error?","^L",false,"^@","resources\\public\\js\\compiled2\\out\\schema\\spec\\collection.cljs","^D",18,"^M",["^G",[["~$l"]]],"^N",null,"^O",["^G",[null,null]],"^B",1,"^A",31,"^C",31,"^P",1,"^Q",true,"^F",["^G",["^H",["^G",[["~$l"]]]]]],"~$CollectionSpec",["^ ","~:num-fields",4,"~:protocols",["^2",["~$cljs.core/IRecord","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","~$schema.spec.core/CoreSpec","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^3","~$schema.spec.collection/CollectionSpec","^@","resources\\public\\js\\compiled2\\out\\schema\\spec\\collection.cljs","^D",26,"~:type",true,"^B",12,"~:internal-ctor",true,"^A",34,"~:record",true,"^C",34,"~:skip-protocol-flag",["^2",["^W","^X","^Y","^Z","^[","^11","^12","^13","^14","^16","^17","^18","^19"]]],"~$->CollectionSpec",["^ ","^>",null,"^?",["^ ","^@","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\schema\\spec\\collection.cljs","^A",34,"^B",12,"^C",34,"^D",26,"^1<",true,"~:factory","~:positional","^F",["^G",["^H",["^G",[["~$pre","~$constructor","~$elements","~$on-error"]]]]]],"^3","~$schema.spec.collection/->CollectionSpec","^L",false,"^@","resources\\public\\js\\compiled2\\out\\schema\\spec\\collection.cljs","^D",26,"^M",["^G",[["^1B","^1C","^1D","^1E"]]],"^N",null,"^O",["^G",[null,null]],"^B",1,"^1<",true,"^1@","^1A","^A",34,"^C",34,"^P",4,"^Q",true,"^F",["^G",["^H",["^G",[["^1B","^1C","^1D","^1E"]]]]]],"~$map->CollectionSpec",["^ ","^>",null,"^?",["^ ","^@","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\schema\\spec\\collection.cljs","^A",34,"^B",12,"^C",34,"^D",26,"^1<",true,"^1@","~:map","^F",["^G",["^H",["^G",[["~$G__32556"]]]]]],"^3","~$schema.spec.collection/map->CollectionSpec","^L",false,"^@","resources\\public\\js\\compiled2\\out\\schema\\spec\\collection.cljs","^D",26,"^M",["^G",[["^1I"]]],"^N",null,"^O",["^G",[null,null]],"^B",1,"^1<",true,"^1@","^1H","^A",34,"^C",34,"^P",1,"^Q",true,"^F",["^G",["^H",["^G",[["^1I"]]]]]],"~$collection-spec",["^ ","^>",null,"^?",["^ ","^@","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\schema\\spec\\collection.cljs","^A",53,"^B",7,"^C",53,"^D",22,"^F",["^G",["^H",["^G",[["^1B","^1C","^1D","^1E"]]]]],"~:doc","A collection represents a collection of elements, each of which is itself\n   schematized.  At the top level, the collection has a precondition\n   (presumably on the overall type), a constructor for the collection from a\n   sequence of items, an element spec, and a function that constructs a\n   descriptive error on failure.\n\n   The element spec is a sequence of maps, each of which provides an element\n   schema, cardinality, parser (allowing for efficient processing of\n   structured collections), and optional error wrapper."],"^3","~$schema.spec.collection/collection-spec","^L",false,"^@","resources\\public\\js\\compiled2\\out\\schema\\spec\\collection.cljs","^D",22,"^M",["^G",[["^1B","^1C","^1D","^1E"]]],"^N",null,"^O",["^G",[null,null]],"^B",1,"^A",53,"^C",53,"^P",4,"^Q",true,"^F",["^G",["^H",["^G",[["^1B","^1C","^1D","^1E"]]]]],"^1L","A collection represents a collection of elements, each of which is itself\n   schematized.  At the top level, the collection has a precondition\n   (presumably on the overall type), a constructor for the collection from a\n   sequence of items, an element spec, and a function that constructs a\n   descriptive error on failure.\n\n   The element spec is a sequence of maps, each of which provides an element\n   schema, cardinality, parser (allowing for efficient processing of\n   structured collections), and optional error wrapper."],"~$all-elements",["^ ","^>",null,"^?",["^ ","^@","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\schema\\spec\\collection.cljs","^A",77,"^B",7,"^C",77,"^D",19,"^F",["^G",["^H",["^G",[["~$schema"]]]]]],"^3","~$schema.spec.collection/all-elements","^L",false,"^@","resources\\public\\js\\compiled2\\out\\schema\\spec\\collection.cljs","^D",19,"^M",["^G",[["^1O"]]],"^N",null,"^O",["^G",[null,null]],"^B",1,"^A",77,"^C",77,"^P",1,"^Q",true,"^F",["^G",["^H",["^G",[["^1O"]]]]]],"~$one-element",["^ ","^>",null,"^?",["^ ","^@","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\schema\\spec\\collection.cljs","^A",82,"^B",7,"^C",82,"^D",18,"^F",["^G",["^H",["^G",[["~$required?","^1O","~$parser"]]]]]],"^3","~$schema.spec.collection/one-element","^L",false,"^@","resources\\public\\js\\compiled2\\out\\schema\\spec\\collection.cljs","^D",18,"^M",["^G",[["^1R","^1O","^1S"]]],"^N",null,"^O",["^G",[null,null]],"^B",1,"^A",82,"^C",82,"^P",3,"^Q",true,"^F",["^G",["^H",["^G",[["^1R","^1O","^1S"]]]]]]],"~:require-macros",["^ ","^7","^8","^8","^8"],"~:cljs.analyzer/constants",["^ ","~:seen",["^2",["~:schema","^1E","~:return-walked?","~:at-most-one","~:pre","^1B","~:elements","~:parser","~:zero-or-more","~:constructor","^1D","~:on-error","~:cardinality","^1C","~:exactly-one"]],"~:order",["^21","^1X","^1Y","^1[","^23","^20","^24","^1B","^1C","^1D","^1E","^25","^22","^26","^1Z"]],"^1L","A collection spec represents a collection of elements,\n   each of which is itself schematized."]