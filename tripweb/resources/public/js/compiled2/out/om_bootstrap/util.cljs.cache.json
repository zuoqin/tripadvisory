["^ ","~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$om-bootstrap.util","~:imports",null,"~:requires",["^ ","~$gobject","~$goog.object","^8","^8","~$om","~$om.core","^:","^:","~$s","~$schema.core","^;","^;"],"~:uses",null,"~:defs",["^ ","~$get-props",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\om_bootstrap\\util.cljs","~:line",34,"~:column",7,"~:end-line",34,"~:end-column",16,"~:arglists",["~#list",["~$quote",["^G",[["~$x"]]]]],"~:doc","This is the same as om.core/get-props. We added it to get around\n  the new precondition in Om 0.8.0."],"^3","~$om-bootstrap.util/get-props","~:variadic",false,"^A","resources\\public\\js\\compiled2\\out\\om_bootstrap\\util.cljs","^E",16,"~:method-params",["^G",[["~$x"]]],"~:protocol-impl",null,"~:arglists-meta",["^G",[null,null]],"^C",1,"^B",34,"^D",34,"~:max-fixed-arity",1,"~:fn-var",true,"^F",["^G",["^H",["^G",[["~$x"]]]]],"^I","This is the same as om.core/get-props. We added it to get around\n  the new precondition in Om 0.8.0."],"~$chain-fns",["^ ","^?",null,"^@",["^ ","^A","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\om_bootstrap\\util.cljs","^B",68,"^C",7,"^D",68,"^E",16,"^F",["^G",["^H",["^G",[["~$l","~$r"]]]]],"^I","Generates a new function that calls each supplied side-effecting\n  function."],"^3","~$om-bootstrap.util/chain-fns","^K",false,"^A","resources\\public\\js\\compiled2\\out\\om_bootstrap\\util.cljs","^E",16,"^L",["^G",[["~$l","~$r"]]],"^M",null,"^N",["^G",[null,null]],"^C",1,"^B",68,"^D",68,"^O",2,"^P",true,"^F",["^G",["^H",["^G",[["~$l","~$r"]]]]],"^I","Generates a new function that calls each supplied side-effecting\n  function."],"~$merge-props",["^ ","^?",null,"^@",["^ ","^A","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\om_bootstrap\\util.cljs","^B",96,"^C",7,"^D",96,"^E",18,"^F",["^G",["^H",["^G",[["~$&","~$prop-maps"]]]]],"^I","Merges two maps that represent React properties. Merges occur\n  according to the functions defined in `react-merges`.","~:top-fn",["^ ","^K",true,"^O",0,"^L",[["^G",["^T"]]],"^F",["^G",[["~$&","^T"]]],"^N",["^G",[null]]]],"^3","~$om-bootstrap.util/merge-props","^K",true,"^A","resources\\public\\js\\compiled2\\out\\om_bootstrap\\util.cljs","^E",18,"^U",["^ ","^K",true,"^O",0,"^L",[["^G",["^T"]]],"^F",["^G",[["~$&","^T"]]],"^N",["^G",[null]]],"^L",[["^G",["^T"]]],"^M",null,"^N",["^G",[null]],"^C",1,"^B",96,"^D",96,"^O",0,"^P",true,"^F",["^G",[["~$&","^T"]]],"^I","Merges two maps that represent React properties. Merges occur\n  according to the functions defined in `react-merges`."],"~$copy-js",["^ ","^?",null,"^@",["^ ","^A","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\om_bootstrap\\util.cljs","^B",113,"^C",7,"^D",113,"^E",14,"^F",["^G",["^H",["^G",[["~$arr"]]]]],"^I","Returns a basic, shallow copy of the supplied JS object."],"^3","~$om-bootstrap.util/copy-js","^K",false,"^A","resources\\public\\js\\compiled2\\out\\om_bootstrap\\util.cljs","^E",14,"^L",["^G",[["^X"]]],"^M",null,"^N",["^G",[null,null]],"^C",1,"^B",113,"^D",113,"^O",1,"^P",true,"^F",["^G",["^H",["^G",[["^X"]]]]],"^I","Returns a basic, shallow copy of the supplied JS object."],"~$collectify",["^ ","~:schema",["^G",["~$schema.core/make-fn-schema","~$output-schema40643",["~$input-schema40644"]]],"^?",null,"^@",["^ ","^F",["^G",["^H",["^G",[["~$x"]]]]],"^A","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\om_bootstrap\\util.cljs","^B",26,"^C",9,"^D",26,"^E",19,"^[",["^G",["^10","^11",["^12"]]],"^I","Inputs: [x :- s/Any]\n  Returns: [s/Any]","~:raw-arglists",["^G",["^H",["^G",[["~$x","~:-","~$s/Any"]]]]]],"^3","~$om-bootstrap.util/collectify","^K",false,"^A","resources\\public\\js\\compiled2\\out\\om_bootstrap\\util.cljs","^E",19,"^L",["^G",[["~$G__40647"]]],"^M",null,"^N",["^G",[null,null]],"^C",1,"^13",["^G",["^H",["^G",[["~$x","~:-","^14"]]]]],"^B",26,"^D",26,"^O",1,"^P",true,"^F",["^G",["^H",["^G",[["~$x"]]]]],"^I","Inputs: [x :- s/Any]\n  Returns: [s/Any]"],"~$om-component?",["^ ","^[",["^G",["^10","~$output-schema40658",["~$input-schema40659"]]],"^?",null,"^@",["^ ","^F",["^G",["^H",["^G",[["~$x"]]]]],"^A","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\om_bootstrap\\util.cljs","^B",40,"^C",9,"^D",40,"^E",22,"^[",["^G",["^10","^18",["^19"]]],"^I","Inputs: [x]\n  Returns: s/Bool","^13",["^G",["^H",["^G",[["~$x"]]]]]],"^3","~$om-bootstrap.util/om-component?","^K",false,"^A","resources\\public\\js\\compiled2\\out\\om_bootstrap\\util.cljs","^E",22,"^L",["^G",[["~$G__40662"]]],"^M",null,"^N",["^G",[null,null]],"^C",1,"^13",["^G",["^H",["^G",[["~$x"]]]]],"^B",40,"^D",40,"^O",1,"^P",true,"^F",["^G",["^H",["^G",[["~$x"]]]]],"^I","Inputs: [x]\n  Returns: s/Bool"],"~$clone-basic-react",["^ ","^?",null,"^@",["^ ","^A","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\om_bootstrap\\util.cljs","^B",144,"^C",7,"^D",144,"^E",24,"^F",["^G",["^H",["^G",[["~$child","~$extra-props"]]]]],"^I","This function is called if the React component child was NOT\n  generated by Om. Merges the supplied properties into the -props\n  field of the supplied React component and creates a shallow copy."],"^3","~$om-bootstrap.util/clone-basic-react","^K",false,"^A","resources\\public\\js\\compiled2\\out\\om_bootstrap\\util.cljs","^E",24,"^L",["^G",[["^1=","^1>"]]],"^M",null,"^N",["^G",[null,null]],"^C",1,"^B",144,"^D",144,"^O",2,"^P",true,"^F",["^G",["^H",["^G",[["^1=","^1>"]]]]],"^I","This function is called if the React component child was NOT\n  generated by Om. Merges the supplied properties into the -props\n  field of the supplied React component and creates a shallow copy."],"~$valid-component?",["^ ","^[",["^G",["^10","~$output-schema40688",["~$input-schema40689"]]],"^?",null,"^@",["^ ","^F",["^G",["^H",["^G",[["^1="]]]]],"^A","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\om_bootstrap\\util.cljs","^B",50,"^C",9,"^D",50,"^E",25,"^[",["^G",["^10","^1A",["^1B"]]],"^I","Inputs: [child]\n  Returns: s/Bool\n\n  Returns true if the supplied argument is a valid React component,\n  false otherwise.","^13",["^G",["^H",["^G",[["^1="]]]]]],"^3","~$om-bootstrap.util/valid-component?","^K",false,"^A","resources\\public\\js\\compiled2\\out\\om_bootstrap\\util.cljs","^E",25,"^L",["^G",[["~$G__40692"]]],"^M",null,"^N",["^G",[null,null]],"^C",1,"^13",["^G",["^H",["^G",[["^1="]]]]],"^B",50,"^D",50,"^O",1,"^P",true,"^F",["^G",["^H",["^G",[["^1="]]]]],"^I","Inputs: [child]\n  Returns: s/Bool\n\n  Returns true if the supplied argument is a valid React component,\n  false otherwise."],"~$clone-with-props",["^ ","^?",null,"^@",["^ ","^A","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\om_bootstrap\\util.cljs","^B",157,"^C",7,"^D",157,"^E",23,"^F",["^G",["^H",["^G",[["^1="],["^1=","^1>"]]]]],"^I","Returns a shallow copy of the supplied component (child); the copy\n  will have any props provided by extra-props merged in. Props are\n  merged in the same manner as merge-props, so props like :class will\n  be merged intelligently.\n\n  extra-props can be a function of the old props that returns new\n  props, OR it can be a map of props.\n\n  If the supplied child is an Om component, any supplied extra\n  properties will be merged into the underlying cursor and accessible\n  in the Om constructor.","^U",["^ ","^K",false,"^O",2,"^L",["^G",[["^1="],["^1=","^1>"]]],"^F",["^G",[["^1="],["^1=","^1>"]]],"^N",["^G",[null,null]]]],"^3","~$om-bootstrap.util/clone-with-props","^K",false,"^A","resources\\public\\js\\compiled2\\out\\om_bootstrap\\util.cljs","^E",23,"^U",["^ ","^K",false,"^O",2,"^L",["^G",[["^1="],["^1=","^1>"]]],"^F",["^G",[["^1="],["^1=","^1>"]]],"^N",["^G",[null,null]]],"^L",["^G",[["^1="],["^1=","^1>"]]],"^M",null,"^N",["^G",[null,null]],"^C",1,"^B",157,"^D",157,"^O",2,"^P",true,"^F",["^G",[["^1="],["^1=","^1>"]]],"^I","Returns a shallow copy of the supplied component (child); the copy\n  will have any props provided by extra-props merged in. Props are\n  merged in the same manner as merge-props, so props like :class will\n  be merged intelligently.\n\n  extra-props can be a function of the old props that returns new\n  props, OR it can be a map of props.\n\n  If the supplied child is an Om component, any supplied extra\n  properties will be merged into the underlying cursor and accessible\n  in the Om constructor."],"~$react-merges",["^ ","^3","~$om-bootstrap.util/react-merges","^A","resources\\public\\js\\compiled2\\out\\om_bootstrap\\util.cljs","^B",78,"^C",1,"^D",78,"^E",18,"^@",["^ ","^A","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\om_bootstrap\\util.cljs","^B",78,"^C",6,"^D",78,"^E",18],"^I","Map of React keyword to a custom function for its merge. Tries to\n  do a decent job with event handlers as well; currently only\n  handles :on-select :on-click, :on-blur, kebab-cased as om-tools\n  prefers."],"~$some-valid-component?",["^ ","^[",["^G",["^10","~$output-schema40703",["~$input-schema40704"]]],"^?",null,"^@",["^ ","^F",["^G",["^H",["^G",[["~$children"]]]]],"^A","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\om_bootstrap\\util.cljs","^B",58,"^C",9,"^D",58,"^E",30,"^[",["^G",["^10","^1J",["^1K"]]],"^I","Inputs: [children]\n  Returns: s/Bool\n\n  Returns true if the supplied sequence contains some valid React component,\n  false otherwise.","^13",["^G",["^H",["^G",[["^1L"]]]]]],"^3","~$om-bootstrap.util/some-valid-component?","^K",false,"^A","resources\\public\\js\\compiled2\\out\\om_bootstrap\\util.cljs","^E",30,"^L",["^G",[["~$G__40707"]]],"^M",null,"^N",["^G",[null,null]],"^C",1,"^13",["^G",["^H",["^G",[["^1L"]]]]],"^B",58,"^D",58,"^O",1,"^P",true,"^F",["^G",["^H",["^G",[["^1L"]]]]],"^I","Inputs: [children]\n  Returns: s/Bool\n\n  Returns true if the supplied sequence contains some valid React component,\n  false otherwise."],"~$strict-valid-component?",["^ ","^[",["^G",["^10","~$output-schema40673",["~$input-schema40674"]]],"^?",null,"^@",["^ ","^F",["^G",["^H",["^G",[["^1="]]]]],"^A","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\om_bootstrap\\util.cljs","^B",44,"^C",9,"^D",44,"^E",32,"^[",["^G",["^10","^1P",["^1Q"]]],"^I","Inputs: [child]\n  Returns: s/Bool\n\n  TODO: Once Om updates its externs to include this file, we can\n  remove the janky aget call.","^13",["^G",["^H",["^G",[["^1="]]]]]],"^3","~$om-bootstrap.util/strict-valid-component?","^K",false,"^A","resources\\public\\js\\compiled2\\out\\om_bootstrap\\util.cljs","^E",32,"^L",["^G",[["~$G__40677"]]],"^M",null,"^N",["^G",[null,null]],"^C",1,"^13",["^G",["^H",["^G",[["^1="]]]]],"^B",44,"^D",44,"^O",1,"^P",true,"^F",["^G",["^H",["^G",[["^1="]]]]],"^I","Inputs: [child]\n  Returns: s/Bool\n\n  TODO: Once Om updates its externs to include this file, we can\n  remove the janky aget call."],"~$merge-with-fns",["^ ","^?",null,"^@",["^ ","^A","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\om_bootstrap\\util.cljs","^B",7,"^C",7,"^D",7,"^E",21,"^F",["^G",["^H",["^G",[["~$k->fn","~$maps"]]]]],"^I","Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by looking up the proper merge function and in the\n  supplied map of key -> merge-fn and using that for the big merge. If\n  a key doesn't have a merge function, the right value wins (as with\n  merge)."],"^3","~$om-bootstrap.util/merge-with-fns","^K",false,"^A","resources\\public\\js\\compiled2\\out\\om_bootstrap\\util.cljs","^E",21,"^L",["^G",[["^1U","^1V"]]],"^M",null,"^N",["^G",[null,null]],"^C",1,"^B",7,"^D",7,"^O",2,"^P",true,"^F",["^G",["^H",["^G",[["^1U","^1V"]]]]],"^I","Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by looking up the proper merge function and in the\n  supplied map of key -> merge-fn and using that for the big merge. If\n  a key doesn't have a merge function, the right value wins (as with\n  merge)."],"~$clone-om",["^ ","^?",null,"^@",["^ ","^A","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\om_bootstrap\\util.cljs","^B",127,"^C",7,"^D",127,"^E",15,"^F",["^G",["^H",["^G",[["^1=","^1>"]]]]],"^I","Merges the supplied extra properties into the underlying Om cursor\n  and calls the constructor to clone the React component.\n\n  Requires that the supplied child has an Om cursor attached to it! "],"^3","~$om-bootstrap.util/clone-om","^K",false,"^A","resources\\public\\js\\compiled2\\out\\om_bootstrap\\util.cljs","^E",15,"^L",["^G",[["^1=","^1>"]]],"^M",null,"^N",["^G",[null,null]],"^C",1,"^B",127,"^D",127,"^O",2,"^P",true,"^F",["^G",["^H",["^G",[["^1=","^1>"]]]]],"^I","Merges the supplied extra properties into the underlying Om cursor\n  and calls the constructor to clone the React component.\n\n  Requires that the supplied child has an Om cursor attached to it! "],"~$create-element",["^ ","^?",null,"^@",["^ ","^A","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\om_bootstrap\\util.cljs","^B",122,"^C",7,"^D",122,"^E",21,"^F",["^G",["^H",["^G",[["^1="],["^1=","~$props"]]]]],"^U",["^ ","^K",false,"^O",2,"^L",["^G",[["^1="],["^1=","^1["]]],"^F",["^G",[["^1="],["^1=","^1["]]],"^N",["^G",[null,null]]]],"^3","~$om-bootstrap.util/create-element","^K",false,"^A","resources\\public\\js\\compiled2\\out\\om_bootstrap\\util.cljs","^E",21,"^U",["^ ","^K",false,"^O",2,"^L",["^G",[["^1="],["^1=","^1["]]],"^F",["^G",[["^1="],["^1=","^1["]]],"^N",["^G",[null,null]]],"^L",["^G",[["^1="],["^1=","^1["]]],"^M",null,"^N",["^G",[null,null]],"^C",1,"^B",122,"^D",122,"^O",2,"^P",true,"^F",["^G",[["^1="],["^1=","^1["]]]]],"~:require-macros",["^ ","^9","^:","^:","^:","~$s","^;","^;","^;"],"~:cljs.analyzer/constants",["^ ","~:seen",["^2",["~$x","^1=","~$schema.core/Any","^[","~:children","~:schema.core/error","~:key","~:else","~:ref","^1L","~:value","^Z","~:on-blur","~:type","^17","~:on-click","~:className","~:style","~$s/Bool","^1@","~:on-select","~:class","^1I","^1O","~:error","^I","~:keywordize-keys","^14"]],"~:order",["~$x","^[","^14","^Z","^2<","^2:","^2C","^26","^24","^17","^2@","^1=","^1O","^I","^1@","^1L","^1I","^25","^27","^29","^2;","^2=","^2>","^2?","^2A","^2B","^2D","^28"]],"^I","Utilities for the om-bootstrap library."]