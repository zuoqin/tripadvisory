["^ ","~:name","~$cljs.core.async.impl.protocols","~:doc",null,"~:excludes",["~#set",[]],"~:use-macros",null,"~:require-macros",null,"~:uses",null,"~:requires",null,"~:imports",null,"~:defs",["^ ","~$remove!",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\cljs\\core\\async\\impl\\protocols.cljs","~:line",32,"~:column",4,"~:end-line",32,"~:end-column",11,"~:protocol","~$cljs.core.async.impl.protocols/Buffer","^2","remove and return next item from buffer, called under chan mutex","~:arglists",["~#list",["~$quote",["^F",[["~$b"]]]]]],"^C","^D","^0","~$cljs.core.async.impl.protocols/remove!","~:variadic",false,"^>","resources\\public\\js\\compiled2\\out\\cljs\\core\\async\\impl\\protocols.cljs","^B",11,"~:method-params",["^F",[["~$b"]]],"~:protocol-impl",null,"~:arglists-meta",["^F",[null,null]],"^@",1,"^?",30,"^A",32,"~:max-fixed-arity",1,"~:fn-var",true,"^E",["^F",["^G",["^F",[["~$b"]]]]],"^2","remove and return next item from buffer, called under chan mutex"],"~$close-buf!",["^ ","^<",null,"^=",["^ ","^>","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\cljs\\core\\async\\impl\\protocols.cljs","^?",34,"^@",4,"^A",34,"^B",14,"^C","^D","^2","called on chan closed under chan mutex, return ignored","^E",["^F",["^G",["^F",[["~$b"]]]]]],"^C","^D","^0","~$cljs.core.async.impl.protocols/close-buf!","^I",false,"^>","resources\\public\\js\\compiled2\\out\\cljs\\core\\async\\impl\\protocols.cljs","^B",14,"^J",["^F",[["~$b"]]],"^K",null,"^L",["^F",[null,null]],"^@",1,"^?",30,"^A",34,"^M",1,"^N",true,"^E",["^F",["^G",["^F",[["~$b"]]]]],"^2","called on chan closed under chan mutex, return ignored"],"~$close!",["^ ","^<",null,"^=",["^ ","^>","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\cljs\\core\\async\\impl\\protocols.cljs","^?",21,"^@",4,"^A",21,"^B",10,"^C","~$cljs.core.async.impl.protocols/Channel","^2",null,"^E",["^F",["^G",["^F",[["~$chan"]]]]]],"^C","^R","^0","~$cljs.core.async.impl.protocols/close!","^I",false,"^>","resources\\public\\js\\compiled2\\out\\cljs\\core\\async\\impl\\protocols.cljs","^B",10,"^J",["^F",[["^S"]]],"^K",null,"^L",["^F",[null,null]],"^@",1,"^?",20,"^A",21,"^M",1,"^N",true,"^E",["^F",["^G",["^F",[["^S"]]]]],"^2",null],"~$Handler",["^ ","^=",["^ ","^>","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\cljs\\core\\async\\impl\\protocols.cljs","^?",24,"^@",14,"^A",24,"^B",21,"^2",null,"~:protocol-symbol",true,"~:jsdoc",["^F",["@interface"]],"~:protocol-info",["^ ","~:methods",["^ ","~$active?",[["~$h"]],"~$blockable?",[["~$h"]],"~$commit",[["~$h"]]]]],"^V",true,"^0","~$cljs.core.async.impl.protocols/Handler","^>","resources\\public\\js\\compiled2\\out\\cljs\\core\\async\\impl\\protocols.cljs","^B",21,"^@",1,"^?",24,"^X",["^ ","^Y",["^ ","^Z",[["~$h"]],"^[",[["~$h"]],"^10",[["~$h"]]]],"~:info",null,"^A",24,"~:impls",["^4",[]],"^2",null,"^W",["^F",["@interface"]]],"^[",["^ ","^<",null,"^=",["^ ","^>","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\cljs\\core\\async\\impl\\protocols.cljs","^?",26,"^@",4,"^A",26,"^B",14,"^C","^11","^2","returns true if this handler may be blocked, otherwise it must not block","^E",["^F",["^G",["^F",[["~$h"]]]]]],"^C","^11","^0","~$cljs.core.async.impl.protocols/blockable?","^I",false,"^>","resources\\public\\js\\compiled2\\out\\cljs\\core\\async\\impl\\protocols.cljs","^B",14,"^J",["^F",[["~$h"]]],"^K",null,"^L",["^F",[null,null]],"^@",1,"^?",24,"^A",26,"^M",1,"^N",true,"^E",["^F",["^G",["^F",[["~$h"]]]]],"^2","returns true if this handler may be blocked, otherwise it must not block"],"^Z",["^ ","^<",null,"^=",["^ ","^>","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\cljs\\core\\async\\impl\\protocols.cljs","^?",25,"^@",4,"^A",25,"^B",11,"^C","^11","^2","returns true if has callback. Must work w/o lock","^E",["^F",["^G",["^F",[["~$h"]]]]]],"^C","^11","^0","~$cljs.core.async.impl.protocols/active?","^I",false,"^>","resources\\public\\js\\compiled2\\out\\cljs\\core\\async\\impl\\protocols.cljs","^B",11,"^J",["^F",[["~$h"]]],"^K",null,"^L",["^F",[null,null]],"^@",1,"^?",24,"^A",25,"^M",1,"^N",true,"^E",["^F",["^G",["^F",[["~$h"]]]]],"^2","returns true if has callback. Must work w/o lock"],"~$Buffer",["^ ","^=",["^ ","^>","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\cljs\\core\\async\\impl\\protocols.cljs","^?",30,"^@",14,"^A",30,"^B",20,"^2",null,"^V",true,"^W",["^F",["@interface"]],"^X",["^ ","^Y",["^ ","~$full?",[["~$b"]],"^;",[["~$b"]],"~$add!*",[["~$b","~$itm"]],"^O",[["~$b"]]]]],"^V",true,"^0","^D","^>","resources\\public\\js\\compiled2\\out\\cljs\\core\\async\\impl\\protocols.cljs","^B",20,"^@",1,"^?",30,"^X",["^ ","^Y",["^ ","^17",[["~$b"]],"^;",[["~$b"]],"^18",[["~$b","^19"]],"^O",[["~$b"]]]],"^12",null,"^A",30,"^13",["^4",[]],"^2",null,"^W",["^F",["@interface"]]],"^17",["^ ","^<",null,"^=",["^ ","^>","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\cljs\\core\\async\\impl\\protocols.cljs","^?",31,"^@",4,"^A",31,"^B",9,"^C","^D","^2","returns true if buffer can accept put","^E",["^F",["^G",["^F",[["~$b"]]]]]],"^C","^D","^0","~$cljs.core.async.impl.protocols/full?","^I",false,"^>","resources\\public\\js\\compiled2\\out\\cljs\\core\\async\\impl\\protocols.cljs","^B",9,"^J",["^F",[["~$b"]]],"^K",null,"^L",["^F",[null,null]],"^@",1,"^?",30,"^A",31,"^M",1,"^N",true,"^E",["^F",["^G",["^F",[["~$b"]]]]],"^2","returns true if buffer can accept put"],"~$add!",["^ ","^<",null,"^=",["^ ","^>","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\cljs\\core\\async\\impl\\protocols.cljs","^?",36,"^@",7,"^A",36,"^B",11,"^E",["^F",["^G",["^F",[["~$b"],["~$b","^19"]]]]],"~:top-fn",["^ ","^I",false,"^M",2,"^J",["^F",[["~$b"],["~$b","^19"]]],"^E",["^F",[["~$b"],["~$b","^19"]]],"^L",["^F",[null,null]]]],"^0","~$cljs.core.async.impl.protocols/add!","^I",false,"^>","resources\\public\\js\\compiled2\\out\\cljs\\core\\async\\impl\\protocols.cljs","^B",11,"^1<",["^ ","^I",false,"^M",2,"^J",["^F",[["~$b"],["~$b","^19"]]],"^E",["^F",[["~$b"],["~$b","^19"]]],"^L",["^F",[null,null]]],"^J",["^F",[["~$b"],["~$b","^19"]]],"^K",null,"^L",["^F",[null,null]],"^@",1,"^?",36,"^A",36,"^M",2,"^N",true,"^E",["^F",[["~$b"],["~$b","^19"]]]],"^18",["^ ","^<",null,"^=",["^ ","^>","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\cljs\\core\\async\\impl\\protocols.cljs","^?",33,"^@",4,"^A",33,"^B",9,"^C","^D","^2","if room, add item to the buffer, returns b, called under chan mutex","^E",["^F",["^G",["^F",[["~$b","^19"]]]]]],"^C","^D","^0","~$cljs.core.async.impl.protocols/add!*","^I",false,"^>","resources\\public\\js\\compiled2\\out\\cljs\\core\\async\\impl\\protocols.cljs","^B",9,"^J",["^F",[["~$b","^19"]]],"^K",null,"^L",["^F",[null,null]],"^@",1,"^?",30,"^A",33,"^M",2,"^N",true,"^E",["^F",["^G",["^F",[["~$b","^19"]]]]],"^2","if room, add item to the buffer, returns b, called under chan mutex"],"~$ReadPort",["^ ","^=",["^ ","^>","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\cljs\\core\\async\\impl\\protocols.cljs","^?",13,"^@",14,"^A",13,"^B",22,"^2",null,"^V",true,"^W",["^F",["@interface"]],"^X",["^ ","^Y",["^ ","~$take!",[["~$port","~$fn1-handler"]]]]],"^V",true,"^0","~$cljs.core.async.impl.protocols/ReadPort","^>","resources\\public\\js\\compiled2\\out\\cljs\\core\\async\\impl\\protocols.cljs","^B",22,"^@",1,"^?",13,"^X",["^ ","^Y",["^ ","^1@",[["^1A","^1B"]]]],"^12",null,"^A",13,"^13",["^4",[]],"^2",null,"^W",["^F",["@interface"]]],"~$Channel",["^ ","^=",["^ ","^>","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\cljs\\core\\async\\impl\\protocols.cljs","^?",20,"^@",14,"^A",20,"^B",21,"^2",null,"^V",true,"^W",["^F",["@interface"]],"^X",["^ ","^Y",["^ ","^Q",[["^S"]],"~$closed?",[["^S"]]]]],"^V",true,"^0","^R","^>","resources\\public\\js\\compiled2\\out\\cljs\\core\\async\\impl\\protocols.cljs","^B",21,"^@",1,"^?",20,"^X",["^ ","^Y",["^ ","^Q",[["^S"]],"^1E",[["^S"]]]],"^12",null,"^A",20,"^13",["^4",[]],"^2",null,"^W",["^F",["@interface"]]],"^1E",["^ ","^<",null,"^=",["^ ","^>","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\cljs\\core\\async\\impl\\protocols.cljs","^?",22,"^@",4,"^A",22,"^B",11,"^C","^R","^2",null,"^E",["^F",["^G",["^F",[["^S"]]]]]],"^C","^R","^0","~$cljs.core.async.impl.protocols/closed?","^I",false,"^>","resources\\public\\js\\compiled2\\out\\cljs\\core\\async\\impl\\protocols.cljs","^B",11,"^J",["^F",[["^S"]]],"^K",null,"^L",["^F",[null,null]],"^@",1,"^?",20,"^A",22,"^M",1,"^N",true,"^E",["^F",["^G",["^F",[["^S"]]]]],"^2",null],"~$UnblockingBuffer",["^ ","^=",["^ ","^>","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\cljs\\core\\async\\impl\\protocols.cljs","^?",43,"^@",14,"^A",43,"^B",30,"^2",null,"^V",true,"^W",["^F",["@interface"]],"^X",["^ ","^Y",["^ "]]],"^V",true,"^0","~$cljs.core.async.impl.protocols/UnblockingBuffer","^>","resources\\public\\js\\compiled2\\out\\cljs\\core\\async\\impl\\protocols.cljs","^B",30,"^@",1,"^?",43,"^X",["^ ","^Y",["^ "]],"^12",null,"^A",43,"^13",["^4",[]],"^2",null,"^W",["^F",["@interface"]]],"~$MAX-QUEUE-SIZE",["^ ","^0","~$cljs.core.async.impl.protocols/MAX-QUEUE-SIZE","^>","resources\\public\\js\\compiled2\\out\\cljs\\core\\async\\impl\\protocols.cljs","^?",11,"^@",1,"^A",11,"^B",28,"~:const",true,"^=",["^ ","^>","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\cljs\\core\\async\\impl\\protocols.cljs","^?",11,"^@",14,"^A",11,"^B",28,"^1K",true]],"^10",["^ ","^<",null,"^=",["^ ","^>","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\cljs\\core\\async\\impl\\protocols.cljs","^?",28,"^@",4,"^A",28,"^B",10,"^C","^11","^2","commit to fulfilling its end of the transfer, returns cb. Must be called within lock","^E",["^F",["^G",["^F",[["~$h"]]]]]],"^C","^11","^0","~$cljs.core.async.impl.protocols/commit","^I",false,"^>","resources\\public\\js\\compiled2\\out\\cljs\\core\\async\\impl\\protocols.cljs","^B",10,"^J",["^F",[["~$h"]]],"^K",null,"^L",["^F",[null,null]],"^@",1,"^?",24,"^A",28,"^M",1,"^N",true,"^E",["^F",["^G",["^F",[["~$h"]]]]],"^2","commit to fulfilling its end of the transfer, returns cb. Must be called within lock"],"~$put!",["^ ","^<",null,"^=",["^ ","^>","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\cljs\\core\\async\\impl\\protocols.cljs","^?",17,"^@",4,"^A",17,"^B",8,"^C","~$cljs.core.async.impl.protocols/WritePort","^2","derefable boolean (false if already closed) if handled, nil if put was enqueued.\n                               Must throw on nil val.","^E",["^F",["^G",["^F",[["^1A","~$val","^1B"]]]]]],"^C","^1N","^0","~$cljs.core.async.impl.protocols/put!","^I",false,"^>","resources\\public\\js\\compiled2\\out\\cljs\\core\\async\\impl\\protocols.cljs","^B",8,"^J",["^F",[["^1A","^1O","^1B"]]],"^K",null,"^L",["^F",[null,null]],"^@",1,"^?",16,"^A",17,"^M",3,"^N",true,"^E",["^F",["^G",["^F",[["^1A","^1O","^1B"]]]]],"^2","derefable boolean (false if already closed) if handled, nil if put was enqueued.\n                               Must throw on nil val."],"^1@",["^ ","^<",null,"^=",["^ ","^>","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\cljs\\core\\async\\impl\\protocols.cljs","^?",14,"^@",4,"^A",14,"^B",9,"^C","^1C","^2","derefable val if taken, nil if take was enqueued","^E",["^F",["^G",["^F",[["^1A","^1B"]]]]]],"^C","^1C","^0","~$cljs.core.async.impl.protocols/take!","^I",false,"^>","resources\\public\\js\\compiled2\\out\\cljs\\core\\async\\impl\\protocols.cljs","^B",9,"^J",["^F",[["^1A","^1B"]]],"^K",null,"^L",["^F",[null,null]],"^@",1,"^?",13,"^A",14,"^M",2,"^N",true,"^E",["^F",["^G",["^F",[["^1A","^1B"]]]]],"^2","derefable val if taken, nil if take was enqueued"],"~$WritePort",["^ ","^=",["^ ","^>","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\cljs\\core\\async\\impl\\protocols.cljs","^?",16,"^@",14,"^A",16,"^B",23,"^2",null,"^V",true,"^W",["^F",["@interface"]],"^X",["^ ","^Y",["^ ","^1M",[["^1A","^1O","^1B"]]]]],"^V",true,"^0","^1N","^>","resources\\public\\js\\compiled2\\out\\cljs\\core\\async\\impl\\protocols.cljs","^B",23,"^@",1,"^?",16,"^X",["^ ","^Y",["^ ","^1M",[["^1A","^1O","^1B"]]]],"^12",null,"^A",16,"^13",["^4",[]],"^2",null,"^W",["^F",["@interface"]]]]]