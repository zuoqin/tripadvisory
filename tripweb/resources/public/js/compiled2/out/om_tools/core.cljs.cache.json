["^ ","~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$om-tools.core","~:imports",null,"~:requires",["^ ","~$om","~$om.core","^8","^8","~$plumbing.fnk.schema","^9","~$p","~$plumbing.core","^:","^:","~$s","~$schema.core","^;","^;"],"~:uses",null,"~:defs",["^ ","~$state-proxy",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\om_tools\\core.cljs","~:line",148,"~:column",7,"~:end-line",148,"~:end-column",18,"~:arglists",["~#list",["~$quote",["^G",[["~$owner"]]]]],"~:doc","Returns an atom-like object for reading and writing Om component\n   state.\n\n   Note: Behavior may exactly not match atoms when deref'ing\n   immediately following a reset!/swap! because Om processes state\n   changes asynchronously in separate render phases."],"^3","~$om-tools.core/state-proxy","~:variadic",false,"^A","resources\\public\\js\\compiled2\\out\\om_tools\\core.cljs","^E",18,"~:method-params",["^G",[["^I"]]],"~:protocol-impl",null,"~:arglists-meta",["^G",[null,null]],"^C",1,"^B",148,"^D",148,"~:max-fixed-arity",1,"~:fn-var",true,"^F",["^G",["^H",["^G",[["^I"]]]]],"^J","Returns an atom-like object for reading and writing Om component\n   state.\n\n   Note: Behavior may exactly not match atoms when deref'ing\n   immediately following a reset!/swap! because Om processes state\n   changes asynchronously in separate render phases."],"~$t_om_tools$core35928",["^ ","~:num-fields",4,"~:protocols",["^2",["~$cljs.core/IReset","~$cljs.core/ISwap","~$cljs.core/IMeta","~$cljs.core/IDeref","~$cljs.core/IWithMeta"]],"^3","~$om-tools.core/t_om_tools$core35928","^A","resources\\public\\js\\compiled2\\out\\om_tools\\core.cljs","~:type",true,"~:anonymous",true,"^C",7,"^B",158,"~:record",false,"~:skip-protocol-flag",["^2",["^U","^V","^W","^X","^Y"]]],"~$->t_om_tools$core35928",["^ ","^?",null,"^@",["^ ","^10",true,"^T",["^2",["^U","^V","^W","^X","^Y"]],"^12",["^2",["^U","^V","^W","^X","^Y"]],"~:factory","~:positional","^F",["^G",["^H",["^G",[["^>","^I","~$get-state","~$meta35929"]]]]],"^A",null],"^T",["^2",["^U","^V","^W","^X","^Y"]],"^3","~$om-tools.core/->t_om_tools$core35928","^L",false,"^A","resources\\public\\js\\compiled2\\out\\om_tools\\core.cljs","^M",["^G",[["^>","^I","^16","^17"]]],"^N",null,"^O",["^G",[null,null]],"^10",true,"^C",7,"^14","^15","^B",158,"^P",4,"^Q",true,"^F",["^G",["^H",["^G",[["^>","^I","^16","^17"]]]]],"^12",["^2",["^U","^V","^W","^X","^Y"]]],"~$t_om_tools$core35931",["^ ","^S",4,"^T",["^2",["^U","^V","^W","^X","^Y"]],"^3","~$om-tools.core/t_om_tools$core35931","^A","resources\\public\\js\\compiled2\\out\\om_tools\\core.cljs","^[",true,"^10",true,"^C",7,"^B",158,"^11",false,"^12",["^2",["^U","^V","^W","^X","^Y"]]],"~$->t_om_tools$core35931",["^ ","^?",null,"^@",["^ ","^10",true,"^T",["^2",["^U","^V","^W","^X","^Y"]],"^12",["^2",["^U","^V","^W","^X","^Y"]],"^14","^15","^F",["^G",["^H",["^G",[["^>","^I","^16","~$meta35932"]]]]],"^A",null],"^T",["^2",["^U","^V","^W","^X","^Y"]],"^3","~$om-tools.core/->t_om_tools$core35931","^L",false,"^A","resources\\public\\js\\compiled2\\out\\om_tools\\core.cljs","^M",["^G",[["^>","^I","^16","^1<"]]],"^N",null,"^O",["^G",[null,null]],"^10",true,"^C",7,"^14","^15","^B",158,"^P",4,"^Q",true,"^F",["^G",["^H",["^G",[["^>","^I","^16","^1<"]]]]],"^12",["^2",["^U","^V","^W","^X","^Y"]]],"~$set-state?!",["^ ","^?",null,"^@",["^ ","^A","e:\\DEV\\clojure\\trusty\\tripweb\\resources\\public\\js\\compiled2\\out\\om_tools\\core.cljs","^B",335,"^C",7,"^D",335,"^E",18,"^F",["^G",["^H",["^G",[["^I","~$v"],["^I","~$korks","~$v"]]]]],"^J","Calls om.core/set-state! when current value not= to v and returns\n   updated owner, otherwise nil.\n   Used to prevent no-op updates from entering render queue","~:added","0.2.0","~:top-fn",["^ ","^L",false,"^P",3,"^M",["^G",[["^I","~$v"],["^I","^1?","~$v"]]],"^F",["^G",[["^I","~$v"],["^I","^1?","~$v"]]],"^O",["^G",[null,null]]]],"^1@","0.2.0","^3","~$om-tools.core/set-state?!","^L",false,"^A","resources\\public\\js\\compiled2\\out\\om_tools\\core.cljs","^E",18,"^1A",["^ ","^L",false,"^P",3,"^M",["^G",[["^I","~$v"],["^I","^1?","~$v"]]],"^F",["^G",[["^I","~$v"],["^I","^1?","~$v"]]],"^O",["^G",[null,null]]],"^M",["^G",[["^I","~$v"],["^I","^1?","~$v"]]],"^N",null,"^O",["^G",[null,null]],"^C",1,"^B",335,"^D",335,"^P",3,"^Q",true,"^F",["^G",[["^I","~$v"],["^I","^1?","~$v"]]],"^J","Calls om.core/set-state! when current value not= to v and returns\n   updated owner, otherwise nil.\n   Used to prevent no-op updates from entering render queue"]],"~:require-macros",["^ ","^7","^8","^8","^8","^9","^9","~$p","^:","^:","^:","~$s","^;","^;","^;"],"~:cljs.analyzer/constants",["^ ","~:seen",["^2",["^I","^1<","^17","^16","^H","^F","^J","^>"]],"~:order",["^>","^F","^J","^H","^I","^16","^17","^1<"]],"^J","Tools for Om"]